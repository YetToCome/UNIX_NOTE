# 套接字编程简介


----------
##套接字地址结构
> 大多数套接字函数需要一个指向套接字地址结构的指针作为参数，每个协议族都定义了他自己的套接字地质结构，结构以sockaddr_开头，并对应每个协议族唯一的后缀结尾。

###IPV4套接字地址结构

> 称为网络套接字地址结构，以sockaddr_命名，定义在`<netinet/in.h>`中

	struct in_addr {
    	in_addr_t s_addr;            //32位IPV4地址    网络字节序
	};
	struct sockaddr_in {
    	uint8_t sin_len;             //结构的长度（16位）
    	sa_family_t sin_family;      //AF_INET长度
    	in_port_t sin_port;          //16位TCP或者UDP的端口号   网络字节序
    	struct in_addr sin_addr;     //32位IPV4地址长度    网络字节序  
    	char sin_zero[8];            //未使用
	};

- sin\_len字段是为增加OSI协议的支持而随4.3BSD-Reno添加的，在此之前是没有的，是无符号短整数，简化可变套接字地址结构的处理
- POSIX规范只要求结构中有3个字段sin\_family, sin\_addr和sin\_port，所有套接字地址结构的大小都是16字节。
- in\_addr_t数据类型必须是一个至少32位的无符号整数类型,in\_port\_t必须是至少支持16位的无符号整数类型，sa\_family\_t可以是任何无符号整数类型，通常是8位的无符号整数，在不支持长度字段的实现中，通常是16位的无符号整数。

<table>
  <tr>
    <th>数据类型</th><th>说明</th><th>头文件</th>
  </tr>
  <tr>
    <td>int8_t</td><td>带符号的8位整数</td><td>&lt;sys/types.h&gt;</td>
  </tr>
  <tr>
    <td>uint8_t</td><td>无符号的8位整数</td><td>&lt;sys/types.h&gt;</td>
  </tr>
  <tr>
    <td>int16_t</td><td>带符号的16位整数</td><td>&lt;sys/types.h&gt;</td>
  </tr>
  <tr>
    <td>uint16_t</td><td>无符号的16位整数</td><td>&lt;sys/types.h&gt;</td>
  </tr>
  <tr>
    <td>int32_t</td><td>带符号的32位整数</td><td>&lt;sys/types.h&gt;</td>
  </tr>
  <tr>
    <td>uint32_t</td><td>无符号的32位整数</td><td>&lt;sys/types.h&gt;</td>
  </tr>
  <tr>
    <td>sa_family_t</td><td>套接字地址结构的地址族</td><td>&lt;sys/socket.h&gt;</td>
  </tr>
  <tr>
    <td>socklen_t</td><td>套接字地址结构的长度，一般为uint32_t</td><td>&lt;sys/socket.h&gt;</td>
  </tr>
  <tr>
    <td>in_addr_t</td><td>IPv4地址，一般为uint32_t</td><td>&lt;netinet/in.h&gt;</td>
  </tr>
  <tr>
    <td>in_port_t</td><td>TCP或UDP端口，一般为uint16_t</td><td>&lt;netinet/in.h&gt;</td>
  </tr>
</table>

- u\_char, u\_short, u\_int和u_long，都是无符号的，已经过时，仅为向后兼容
- IPv4地址和TCP,UDP端口在套接字地址结构中总以网络字节序来存储，主机字节序和网络字节序的区别
- 32位IPv4地址两种不同的访问方法，如果serv定义为某个网络套接字地址结构，serv.sin\_addr将按照in\_addr结构引用32位IPv4地址结构，而serv.sin_addr.s_addr将按照in\_addr_t引用同一个IPv4地址
- sin\_zero整个字段置0
- 套接字地址结构仅在给定主机中使用，虽然结构中的某些字段如IP地址和端口号用在不同主机之间的通信，但结构本身不再主机之间传递

### 通用套接字地址结构

> 任何套接字函数必须处理来自所支持的任何协议族的套接字地址结构


	struct sockaddr {
	    uint8_t sa_len;
	    sa_family_t sa_family;
	    char sa_data[14];
	}


> 于是套接字函数被定义为指向某个通用套接字地质结构的一个指针作为参数之一

	int bind(int, struct sockaddr *, socklen_t);

> 这就要求对这些函数的任何调用都必须将指向特定于协议的套接字地址结购的指针进行类型强制转换，变成指向某个通用套接字地质结构的指针


	struct sockaddr_in serv;
	bind(sockfd, (struct sockaddr *) &serv, sizeof(serv));


###IPv6套接字地址结构


	struct in6_addr {
	    uint8_t s6_addr[16];          //128位IPV6地址    网络字节序
	};
	struct sockaddr_in {
	    uint8_t sin6_len;             //结构的长度（28位）
	    sa_family_t sin6_family;      //AF_INET6长度
	    in_port_t sin6_port;          //16位TCP或者UDP的端口号   网络字节序
	    uint32_t sin6_addr;           //流信息 未定义
	    struct in6_addr sin6_addr;    //IPV6地址长度    网络字节序
	    uint32_t sin6_scope_id;       //set of interfaces for a scope
	};


- 如果系统支持套接字地址结构中的长度字段，那么SIN6\_LEN常值必须定义
- IPv6地址族是AF\_INET6，而IPv4地址族是AF\_INET
- 结构中字段的先后顺序做过编排，使得如果sock\_addr6结构本身是64位对齐的，那么128位的sin6\_addr字段也是64位上对齐的
- sin6\_flowinfor字段分为两个字段
    - 低序20位是流标
    - 高序12位是保留
- 对于具备范围的地址，sin6_scope_id字段标志其范围，最常见的是链路局部地址的接口索引

###新的通用套接字地址结构

	struct sockaddr_storage {
	    uint8_t ss_len;
	    sa_family ss_family;
	};


- 如果系统支持的任何套接字地址有对齐需要，那么其能满足最苛刻的对齐要求
- 足够大，能容纳任何类型的套接字地址结构

###套接字地址结构的比较
